#include "opencv.hpp"
#include "opencv2/core/core.hpp"
#include  "opencv2/highgui/highgui.hpp"
#include "opencv2/video/background_segm.hpp"
#include "stdio.h"
#include "iostream"
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#ifdef _DEBUG
#pragma comment(lib, "opencv_core247d.lib")
#pragma comment(lib, "opencv_imgproc247d.lib")   //MAT processing
#pragma comment(lib, "opencv_objdetect247d.lib") //HOGDescriptor
//#pragma comment(lib, "opencv_gpu247d.lib")
//#pragma comment(lib, "opencv_features2d247d.lib")
#pragma comment(lib, "opencv_highgui247d.lib")
#pragma comment(lib, "opencv_ml247d.lib")
//#pragma comment(lib, "opencv_stitching247d.lib");
//#pragma comment(lib, "opencv_nonfree247d.lib");
#pragma comment(lib, "opencv_video247d.lib")
#else
#pragma comment(lib, "opencv_core247.lib")
#pragma comment(lib, "opencv_imgproc247.lib")
#pragma comment(lib, "opencv_objdetect247.lib")
//#pragma comment(lib, "opencv_gpu247.lib")
//#pragma comment(lib, "opencv_features2d247.lib")
#pragma comment(lib, "opencv_highgui247.lib")
#pragma comment(lib, "opencv_ml247.lib")
//#pragma comment(lib, "opencv_stitching247.lib");
//#pragma comment(lib, "opencv_nonfree247.lib");
#pragma comment(lib, "opencv_video247d.lib")
#endif

using namespace cv;
using namespace std;

Mat img,edges,img1,img2,img3,img4,img5;
Mat frame;
Rect bounding_rect;
char str[100];

vector<vector<Point> > contours;
vector<Vec4i> heirarchy;

int levels = 0;

void on_trackbar(int, void *) {
if(contours.empty()) return;

Mat img_show = img.clone();

// Draw contours of the level indicated by slider
drawContours(img_show, contours, -1, Scalar(0, 0, 255), 3, 8, heirarchy, levels);
double q = contours.size();


rectangle(img, bounding_rect,  Scalar(0,255,0),1, 8,0);
sprintf(str,"%f detection time",q);
putText(img_show,str,Point2f(00,100),FONT_HERSHEY_PLAIN, 2,  Scalar(0,0,255,255));



imshow("Contours", img_show);
}

int main()
{
img = imread("11.jpg");
Mat img_b;
cvtColor(img, img_b, CV_RGB2GRAY);
threshold(img_b,img_b, 200,255, CV_THRESH_BINARY_INV);
distanceTransform(img_b,img3,CV_DIST_L2,5);
normalize(img3, img3, 0, 1.,NORM_MINMAX);
threshold(img3, img3, .5, 1., CV_THRESH_BINARY);

//Canny(img3, edges, 255, 100);
//img5 = abs(img2-img4);
Mat dist_8u;
img3.convertTo(dist_8u, CV_8U);


findContours(dist_8u, contours, heirarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);

namedWindow("Contours");
createTrackbar("levels", "Contours", &levels, 15, on_trackbar);

// Initialize by drawing the top level contours (as 'levels' is initialized to 0)
on_trackbar(0, 0);
imshow("fuck",img3);

//imshow("syc",img2);
//imshow("DF",img);
while(char(waitKey(1)) != 'q') {}




}
